// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int         @id @default(autoincrement())
  uuid         String      @unique @default(uuid())
  name         String
  email        String      @unique
  password     String
  role         UserRole    @default(Lecturer)
  dept         Dept?       @relation(fields: [deptId], references: [id])
  deptId       Int?
  school       School?     @relation(fields: [schoolId], references: [id])
  schoolId     Int?
  notesheet    Notesheet[]
  notesheetsIn Notesheet[] @relation("AllUsers")
  isAdmin      Boolean     @default(false)


  @@map(name: "users")
}

model Dept {
  id       Int    @id @default(autoincrement())
  uuid     String @unique @default(uuid())
  name     String
  faculty  User[]
  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int

  @@map(name: "departments")
}

model School {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())
  name String
  dean User?

  @@map("school")
  Dept Dept[]
}

model Notesheet {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  title       String
  body        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Status
  financial   Boolean
  currentUser User[]   @relation("AllUsers")
  startedBy   User     @relation(fields: [userId], references: [id])
  userId      Int

  @@map(name: "notesheets")
}

enum UserRole {
  Lecturer
  HOD
  DEAN
  REGISTRAR
  PRESIDENT
}

enum Status {
  LIVE
  COMPLETED
}
